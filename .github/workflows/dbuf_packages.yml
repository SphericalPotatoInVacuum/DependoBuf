name: Build dbuf packages

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/docker_images.yml'
      - 'Dockerfile.*'
      - 'lib/**'
      - 'src/**'
      - 'test/**'
      - "CMakeLists.txt"
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/docker_images.yml'
      - 'Dockerfile.*'
      - 'lib/**'
      - 'src/**'
      - 'test/**'
      - "CMakeLists.txt"

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/${{ github.event_name == 'pull_request' && 'custom-' || '' }}

jobs:
  builder:
    name: Builder image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}.{{sha}},enable=${{ github.event_name == 'pull_request' }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}dbufbuilder

      - name: Save metadata to file
        run: echo '${{ steps.meta.outputs.json }}' > /tmp/builder_metadata.json

      - name: Upload metadata as artifact
        uses: actions/upload-artifact@v2
        with:
          name: builder-metadata
          path: /tmp/builder_metadata.json

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: Dockerfile.builder
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  runtime:
    name: Runtime image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: builder

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}.{{sha}},enable=${{ github.event_name == 'pull_request' }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}dbuf

      - name: Download builder image metadata artifact
        uses: actions/download-artifact@v2
        with:
          name: builder-metadata
          path: /tmp

      - name: Read metadata from file
        id: read_metadata
        run: |
          METADATA=$(cat /tmp/builder_metadata.json)
          echo "metadata=$METADATA" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}dbufbuilder:${{ fromJson(steps.read_metadata.outputs.metadata).tags[0] }}
          file: Dockerfile.runtime
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
