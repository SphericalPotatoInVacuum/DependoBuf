name: Build dbuf packages

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/dbuf_packages.yml'
      - 'Dockerfile.*'
      - 'lib/**'
      - 'src/**'
      - 'test/**'
      - "CMakeLists.txt"
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/dbuf_packages.yml'
      - 'Dockerfile.*'
      - 'lib/**'
      - 'src/**'
      - 'test/**'
      - "CMakeLists.txt"

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}/${{ github.event_name == 'pull_request' && 'custom-' || '' }}
  BUILDER_IMAGE_NAME: dbufbuilder
  RUNTIME_IMAGE_NAME: dbuf
  DEV_IMAGE_NAME: dbufdev
  BUILD_TYPE: Release
  PLATFORM_PAIR: linux/amd64

jobs:
  build-builder:
    name: Build builder images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      metadata: ${{ steps.metadata.outputs.json }}
      digest: ${{ steps.build.outputs.metadata }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    env:
      IMAGE_NAME:

    steps:
      - name: Prepare
        run: |
          echo "IMAGE_NAME=$(echo $IMAGE_PREFIX | tr '[:upper:]' '[:lower:]')/$BUILDER_IMAGE_NAME" >> $GITHUB_ENV
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: metadata
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{env.REGISTRY}}/${{ env.IMAGE_NAME}}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: Dockerfile.builder
          push: false
          provenance: false
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{env.REGISTRY}}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=builder-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=builder-${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{env.BUILDER_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{env.BUILDER_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{env.BUILDER_IMAGE_NAME}}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-runtime:
    name: Runtime image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: build-builder
    env:
      REF: ${{ github.event_name == 'pull_request' && github.event.number || github.ref }}
      IMAGE_NAME:
      DATE:
      SHA:
      BUILDER_DIGEST:
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          echo "IMAGE_NAME=$(echo $IMAGE_PREFIX | tr '[:upper:]' '[:lower:]')/$RUNTIME_IMAGE_NAME" >> $GITHUB_ENV
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Download image digests
        uses: actions/download-artifact@v3
        with:
          name: digests-${{env.BUILDER_IMAGE_NAME}}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/${{env.BUILDER_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}

      - name: Get builder image digest
        run: |
          builder_digest=$(ls /tmp/digests/${{env.BUILDER_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }})
          echo "BUILDER_DIGEST=$builder_digest" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Cache compilation results
        uses: actions/cache@v4
        with:
          path: ccache
          key: ccache-build-${{ env.BUILD_TYPE }}-${{ env.PLATFORM_PAIR }}-${{ env.REF }}-${{ env.SHA }}-${{ env.DATE }}
          restore-keys: |
            ccache-build-${{ env.BUILD_TYPE }}-${{ env.PLATFORM_PAIR }}-${{ env.REF }}-
            ccache-build-${{ env.BUILD_TYPE }}-${{ env.PLATFORM_PAIR }}-

      - name: Inject ccache into docker cache
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: ccache
          cache-target: /dbuf/.ccache

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          build-args: |
            BASE_IMAGE=${{env.REGISTRY}}/${{ env.BUILDER_IMAGE_NAME }}@sha256:${{ env.BUILDER_DIGEST }}
          file: Dockerfile.runtime
          push: false
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=runtime-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=runtime-${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{env.RUNTIME_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{env.RUNTIME_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{env.RUNTIME_IMAGE_NAME}}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-dev:
    name: Development image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: build-builder
    env:
      REF: ${{ github.event_name == 'pull_request' && github.event.number || github.ref }}
      IMAGE_NAME:
      DATE:
      SHA:
      BUILDER_DIGEST:
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          echo "IMAGE_NAME=$(echo $IMAGE_PREFIX | tr '[:upper:]' '[:lower:]')/$DEV_IMAGE_NAME" >> $GITHUB_ENV
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Download image digests
        uses: actions/download-artifact@v3
        with:
          name: digests-${{env.BUILDER_IMAGE_NAME}}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/${{env.BUILDER_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}

      - name: Get builder image digest
        run: |
          builder_digest=$(ls /tmp/digests/${{env.BUILDER_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }})
          echo "BUILDER_DIGEST=$builder_digest" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          build-args: |
            BASE_IMAGE=${{env.REGISTRY}}/${{ env.BUILDER_IMAGE_NAME }}@sha256:${{ env.BUILDER_DIGEST }}
          file: Dockerfile.dev
          push: false
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=dev-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=dev-${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{env.DEV_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{env.DEV_IMAGE_NAME}}/${{ env.PLATFORM_PAIR }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{env.DEV_IMAGE_NAME}}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push-images:
    name: Merge image manifests
    runs-on: ubuntu-latest
    needs:
      - build-builder
      - build-runtime
      - build-dev
    env:
      IMAGE_NAME:
    strategy:
      fail-fast: true
      matrix:
        image:
          - dbuf
          - dbufbuilder
          - dbufdev

    steps:
      - name: Prepare
        run: |
          echo "IMAGE_NAME=$(echo $IMAGE_PREFIX | tr '[:upper:]' '[:lower:]')/${{matrix.image}}" >> $GITHUB_ENV

      - name: Download image digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/${{ matrix.image }}
          pattern: digests-${{ matrix.image }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}.{{sha}},enable=${{ github.event_name == 'pull_request' }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests/${{ matrix.image }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "${{ steps.meta.outputs.json }}") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect and test new multi-platform image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
