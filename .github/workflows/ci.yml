on:
  pull_request:
    branches: [ "main" ]


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: clang-16
  CXX: clang++-16

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main'
        sudo apt update

    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libfl-dev clang-16 libc++-16-dev libc++abi-16-dev
        version: 1.0

    - name: Cache Cmake build
      id: cache-build
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/build
        key: build-${{env.BUILD_TYPE}}-${{hashFiles('**/CMakeLists.txt')}}
        restore-keys: |
          build-${{env.BUILD_TYPE}}-
          build-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build/test
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  tidy:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache Cmake build
      id: cache-build
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/build
        key: build-${{env.BUILD_TYPE}}-${{hashFiles('**/CMakeLists.txt')}}
        restore-keys: |
          build-${{env.BUILD_TYPE}}-
          build-

    - name: clang-tidy review
      id: review
      uses: SphericalPotatoInVacuum/clang-tidy-review@master
      with:
        apt_packages: libfl-dev,flex,bison,clang-16,libc++-16-dev,libc++abi-16-dev
        clang_tidy_version: 16
        cmake_command: >
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} &&
          cmake --build ${{github.workspace}}/build --target dbuf
        build_dir: ${{github.workspace}}/build
        config_file: .clang-tidy
        include: '*.h,*.cc'

    - if: steps.review.outputs.total_comments > 0
      run: exit 1

  format:
    permissions: write-all
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{github.workspace}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Format
      uses: DoozyX/clang-format-lint-action@v0.16.1
      with:
        source: 'lib src test'
        exclude: ''
        extensions: 'h,cc'
        clangFormatVersion: 16
        inplace: True

    - name: Suggest
      uses: getsentry/action-git-diff-suggestions@main
      with:
        message: 'clang-format suggested changes'

    - name: Fail if changes
      run: git diff --exit-code
