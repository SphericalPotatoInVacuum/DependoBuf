#![allow(unused_variables, unused_imports, unused_parens, dead_code)]
//! This file was automatically generated by DependoBuf

pub struct StringDependency {
    pub empty: std::rc::Rc<StringDependency>,
    pub notEmpty: std::rc::Rc<StringDependency>,
}

pub struct FloatDependency {
    pub zero: std::rc::Rc<FloatDependency>,
    pub positiveWoSign: std::rc::Rc<FloatDependency>,
    pub positiveWiSign: std::rc::Rc<FloatDependency>,
    pub negativeWiSign: std::rc::Rc<FloatDependency>,
}

pub struct UintDependency {
    pub zero: std::rc::Rc<UintDependency>,
    pub notZero: std::rc::Rc<UintDependency>,
    pub maxUint: std::rc::Rc<UintDependency>,
}

pub struct BoolDependency {
    pub trueField: std::rc::Rc<BoolDependency>,
    pub falseField: std::rc::Rc<BoolDependency>,
}

pub struct IntDependency {
    pub zero: std::rc::Rc<IntDependency>,
    pub positiveWoSign: std::rc::Rc<IntDependency>,
    pub positiveWiSign: std::rc::Rc<IntDependency>,
    pub negativeWiSign: std::rc::Rc<IntDependency>,
    pub maxInt: std::rc::Rc<IntDependency>,
    pub minInt: std::rc::Rc<IntDependency>,
}

impl StringDependency {
    pub fn check(&self, s: &std::rc::Rc<String>) -> bool {
        let empty = &self.empty;
        let notEmpty = &self.notEmpty;
        if !empty.check(&"") { return false; }
        if !notEmpty.check(&"hello") { return false; }
        return true;
    }
}

impl FloatDependency {
    pub fn check(&self, f: &std::rc::Rc<Float32>) -> bool {
        let zero = &self.zero;
        let positiveWoSign = &self.positiveWoSign;
        let positiveWiSign = &self.positiveWiSign;
        let negativeWiSign = &self.negativeWiSign;
        if !zero.check(&0) { return false; }
        if !positiveWoSign.check(&100) { return false; }
        if !positiveWiSign.check(&100) { return false; }
        if !negativeWiSign.check(&-100) { return false; }
        return true;
    }
}

impl UintDependency {
    pub fn check(&self, n: &std::rc::Rc<Uint64>) -> bool {
        let zero = &self.zero;
        let notZero = &self.notZero;
        let maxUint = &self.maxUint;
        if !zero.check(&0) { return false; }
        if !notZero.check(&100) { return false; }
        if !maxUint.check(&18446744073709551615) { return false; }
        return true;
    }
}

impl BoolDependency {
    pub fn check(&self, b: bool) -> bool {
        let trueField = &self.trueField;
        let falseField = &self.falseField;
        if !trueField.check(1) { return false; }
        if !falseField.check(0) { return false; }
        return true;
    }
}

impl IntDependency {
    pub fn check(&self, n: &std::rc::Rc<Int64>) -> bool {
        let zero = &self.zero;
        let positiveWoSign = &self.positiveWoSign;
        let positiveWiSign = &self.positiveWiSign;
        let negativeWiSign = &self.negativeWiSign;
        let maxInt = &self.maxInt;
        let minInt = &self.minInt;
        if !zero.check(&0) { return false; }
        if !positiveWoSign.check(&100) { return false; }
        if !positiveWiSign.check(&100) { return false; }
        if !negativeWiSign.check(&-100) { return false; }
        if !maxInt.check(&9223372036854775807) { return false; }
        if !minInt.check(&-9223372036854775808) { return false; }
        return true;
    }
}

