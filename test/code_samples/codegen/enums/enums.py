# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Annotated, TypeAlias

Unsigned = Annotated[int, Ge(0)]


class _DbufError(TypeError):
    pass


class Nat:
    @dataclass
    class __Zero:
        def check(self) -> None:
            if type(self) not in Nat._possible_types():
                raise _DbufError(
                    'Type Nat.__Zero does not match given dependencies.'
                )

    @dataclass
    class __Succ:
        prev: Nat.nat_type

        def check(self) -> None:
            if type(self) not in Nat._possible_types():
                raise _DbufError(
                    'Type Nat.__Succ does not match given dependencies.'
                )

    nat_type: TypeAlias = __Zero | __Succ

    @classmethod
    def _possible_types(cls) -> set[type]:
        actual = ()
        expected = ()
        if _is_consistent(actual, expected):
            return {cls.__Zero, cls.__Succ}

        return set()

    def __init__(self) -> None:
        self.dependencies = ()

    def zero(self) -> __Zero:
        obj = self.__Zero()
        obj.check(*self.dependencies)
        return obj

    def succ(self, prev: Nat.nat_type) -> __Succ:
        obj = self.__Succ(prev)
        obj.check(*self.dependencies)
        return obj


class TreeH:
    @dataclass
    class __Leaf:
        val: int

        def check(self, h: int) -> None:
            if type(self) not in TreeH._possible_types(h):
                raise _DbufError(
                    'Type TreeH.__Leaf does not match given dependencies.'
                )

    @dataclass
    class __TreeNode:
        val: int
        left: TreeH.tree_h_type
        right: TreeH.tree_h_type

        def check(self, h: int) -> None:
            if type(self) not in TreeH._possible_types(h):
                raise _DbufError(
                    'Type TreeH.__TreeNode does not match given dependencies.'
                )

            left_deps = (h - 1, )
            self.left.check(*left_deps)

            right_deps = (h - 1, )
            self.right.check(*right_deps)

    tree_h_type: TypeAlias = __Leaf | __TreeNode

    @classmethod
    def _possible_types(cls, h: int) -> set[type]:
        actual = (h, )
        expected = (0, )
        if _is_consistent(actual, expected):
            return {cls.__Leaf}

        expected = (None, )  # type: ignore[attr-defined, assignment]
        if _is_consistent(actual, expected):
            return {cls.__TreeNode}

        return set()

    def __init__(self, h: int) -> None:
        self.dependencies = (h, )

    def leaf(self, val: int) -> __Leaf:
        obj = self.__Leaf(val)
        obj.check(*self.dependencies)
        return obj

    def tree_node(self, val: int, left: TreeH.tree_h_type, right: TreeH.tree_h_type) -> __TreeNode:
        obj = self.__TreeNode(val, left, right)
        obj.check(*self.dependencies)
        return obj


def _is_consistent(actual: tuple, expected: tuple) -> bool:
    for i in range(len(actual)):
        if expected[i] is None:
            continue

        if actual[i] != expected[i]:
            return False

    return True
