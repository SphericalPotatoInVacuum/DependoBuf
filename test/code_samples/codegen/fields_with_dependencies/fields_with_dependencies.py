# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Annotated

Unsigned = Annotated[int, Ge(0)]


class DbufError(TypeError):
    pass


class Mes1:
    @dataclass
    class __Mes1:
        def check(self, n: int) -> None:
            pass

    mes1_type = __Mes1

    def __init__(self, n: int) -> None:
        self.dependencies = (n, )

    def construct(self) -> __Mes1:
        obj = self.__Mes1()
        obj.check(*self.dependencies)
        return obj


class Mes2:
    @dataclass
    class __Mes2:
        n: int
        m1: Mes1.mes1_type
        m11: Mes1.mes1_type

        def check(self) -> None:
            m1_deps = (self.n, )
            self.m1.check(*m1_deps)

            m11_deps = (10, )
            self.m11.check(*m11_deps)

    mes2_type = __Mes2

    def __init__(self) -> None:
        self.dependencies = ()

    def construct(self, n: int, m1: Mes1.mes1_type, m11: Mes1.mes1_type) -> __Mes2:
        obj = self.__Mes2(n, m1, m11)
        obj.check(*self.dependencies)
        return obj


def _is_consistent(actual: tuple, expected: tuple) -> bool:
    for i in range(len(actual)):
        if expected[i] is None:
            continue

        if actual[i] != expected[i]:
            return False

    return True
