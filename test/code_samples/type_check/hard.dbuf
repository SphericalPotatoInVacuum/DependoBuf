enum List (n Int) {
  0 => {
    ListEnd
  }
  * => {
    ListNode {
      value Int;
      tail List (n - 1);
    }
  }
}

message A (n Int) (m Int) {
  list List (-(n + m));
}

enum B (n Int) (m Int) (a A n m) {
  *, *, * => {
    BCons {
      list List (n + m);
    }
  }
}

enum TestSubstitution (n Int) (m Int) {
  5, 5 => {
    ListOfLengthTen {
      arr List (n + m);
    }
  }
  *, * => {
    ListOfLengthN {
      arr List n;
    }
  }
}

message C (n Int) (m Int) (a A n m) {
  field B n m A{list: a.list};
}
