# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Any, Annotated


class Nat:
    @dataclass
    class __Zero:
        def check(self):
            pass

    @dataclass
    class __Succ:
        prev: Any # type: ignore

        def check(self):
            self.prev.check()

    def zero(self):
        return self.__Zero()
    
    def succ(self, prev: Any):
        return self.__Succ(prev)
    
    @classmethod
    def zero_type(cls):
        return cls.__Zero
    
    @classmethod
    def succ_type(cls):
        return cls.__Succ
    
    @classmethod
    def nat_type(cls):
        return cls.__Zero | cls.__Succ


NatZeroType = Nat.zero_type()
NatSuccType = Nat.succ_type()
NatType = Nat.nat_type()


class IntList:
    @dataclass
    class __Nil:
        def check(self, size: NatType):
            if not isinstance(size, NatZeroType):
                raise Exception
    
    @dataclass
    class __Element:
        head: int
        tail: IntList.__int_list_type

        def check(self, size: NatType):
            if not isinstance(size, NatSuccType):
                raise Exception
            
            if not self.tail.check(size.prev):
                raise Exception
    
    __int_list_type = __Nil | __Element

    def __init__(self, size: NatType):
        self.size = size

    def element(self, head: int, tail: IntList.__int_list_type):
        obj = self.__Element(head, tail)
        obj.check(self.size)
        return obj

