# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Any, Annotated

Unsigned = Annotated[int, Ge(0)]


class Nat:
    @dataclass
    class __Zero:
        def check(self):
            return True

    @dataclass
    class __Succ:
        prev: Nat.nat_type() # type: ignore

        def check(self):
            return True

    def zero(self):
        return self.__Zero()
    
    def succ(self, prev: Nat.nat_type()):
        return self.__Succ(prev)
    
    @classmethod
    def nat_type(cls):
        return cls.__Zero | cls.__Succ


NatType = Nat.nat_type()


class Message3:
    @dataclass
    class __Message3:
        x: int
        y: int

        def check(self, nat: NatType):
            return True


    def __init__(self, nat: NatType):
        self.nat = nat
    
    def construct(self, x: int, y: int):
        return self.__Message3(x, y)
    
    @classmethod
    def message3_type(cls):
        return cls.__Message3


Message3Type = Message3.message3_type()
    

class Message4:
    @dataclass
    class __Message4:
        m3: Message3Type

        def check(self):
            return True
    
    def construct(self, m3: Message3Type):
        m3_dep = [Nat().zero()]
        if not m3.check(*m3_dep):
            raise Exception

        return self.__Message4(m3)


my_m3 = Message3(Nat().succ(prev=Nat().zero())).construct(x=0, y=0)
print(my_m3)
my_m4 = Message4().construct(m3=my_m3)
print(my_m4)


# Message3 {x: 0, y: 0}