# This file was automatically generated by DependoBuf.
# Please do not change it.

from annotated_types import Ge
from dataclasses import dataclass
from typing import Annotated

Unsigned = Annotated[int, Ge(0)]


class Address:
    @dataclass
    class __Address:
       id: Unsigned
       street: str
       floor: int
       withIntercom: bool

       def check():
          pass
    
    def construct(self, id: Unsigned, street: str, floor: int, withIntercom: bool) -> __Address:
       return self.__Address(id, street, floor, withIntercom)
    
    @classmethod
    def get_address_type(cls):
       return cls.__Address


AddressType = Address.get_address_type()


class Pet:
   @dataclass
   class __Pet:
      id: Unsigned
      kind: str
      name: str

      def check():
         pass
   
   def construct(self, id: Unsigned, kind: str, name: str) -> __Pet:
      return self.__Pet(id, kind, name)
   
   @classmethod
   def get_pet_type(cls):
      return cls.__Pet


PetType = Pet.get_pet_type()


class User:
   @dataclass
   class __User:
      id: Unsigned
      name: str
      address: AddressType # type: ignore
      pet: PetType # type: ignore
      money: float

      def check():
         pass
   
   def construct(self, id, name, address, pet, money) -> __User:
      return self.__User(id, name, address, pet, money)
   
   # ...


adr = Address().construct(
   id=1,
   street="Arbat",
   floor=3,
   withIntercom=False
)

bobik = Pet().construct(
   id=1,
   kind="dog",
   name="Bobik"
)

evgeny = User().construct(
   id=1,
   name="Evgeny",
   address=adr,
   pet=bobik,
   money=14.8
)

print(AddressType)
print(type(adr))
print(type(adr) is AddressType)
