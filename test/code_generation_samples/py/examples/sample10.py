# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Any, Annotated


class Pop:
    @dataclass
    class __Pop:
        a: int
        b: float
        def check(self):
            if type(self) not in Pop.possible_types():
                raise Exception
    
    pop_type = __Pop
    
    @classmethod
    def possible_types(cls) -> set[type]:
        return {cls.__Pop}
    
    def construct(self, a: int, b: float) -> __Pop:
        ...


class Foo:
    @dataclass
    class __Foo:
        pass

    foo_type = __Foo

    def __init__(self, p: Pop.pop_type, i: int) -> None:
        pass

    def construct() -> __init__:
        ...


class Kek:
    @dataclass
    class __Kek:
        pass

    kek_type = __Kek

    __k_deps = []

    def __init__(self, k: Pop.pop_type, f: Foo.foo_type) -> None:
        k_deps = []
        k.check(*self.__k_deps)
        self.k = k
        
        f_deps = [Pop().construct(k.a, 2.1), 5]
        f.check(*f_deps)
        self.f = f