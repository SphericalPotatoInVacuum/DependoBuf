# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Any, Annotated


def is_one_of_types(obj: Any, types_list: list[type]):
    for t in types_list:
        if isinstance(obj, t):
            return True
    
    return False


class Nat:
    @dataclass
    class __Zero:
        def check(self, n: int):
            pass

    @dataclass
    class __Succ:
        prev: Any # type: ignore

        def check(self, n: int):
            if type(self) not in Nat.possible_types(n):
                raise Exception
            
            self.prev.check(n - 1)
    
    @classmethod
    def possible_types(cls, n: int):
        return {cls.__Zero, cls.__Succ}
    
    def __init__(self, n: int):
        self.dependencies = [n]
        self.n = n

    def zero(self):
        obj = self.__Zero()
        obj.check(self.n)
        return obj
    
    def succ(self, prev: Any):
        obj = self.__Succ(prev)
        obj.check(self.n)
        return obj
    
    @classmethod
    def zero_type(cls):
        return cls.__Zero
    
    @classmethod
    def succ_type(cls):
        return cls.__Succ
    
    @classmethod
    def nat_type(cls):
        return cls.__Zero | cls.__Succ


NatZeroType = Nat.zero_type()
NatSuccType = Nat.succ_type()
NatType = Nat.nat_type()


class IntList:
    @dataclass
    class __Nil:
        def check(self, n: int, size: NatType):
            if not isinstance(size, NatZeroType):
                raise Exception
    
    @dataclass
    class __Element:
        head: int
        tail: IntList.__int_list_type

        def check(self, n: int, size: NatType):
            if type(self) not in IntList.possible_types(n, size):
                raise Exception
            
            self.tail.check(n - 1, size.prev)
    
    __int_list_type = __Nil | __Element

    @classmethod
    def possible_types(cls, n: int, size: NatType):
        if isinstance(size, NatZeroType):
            return {cls.__Nil}
        
        elif isinstance(size, NatSuccType):
            return {cls.__Element}
        
        return {}


    def __init__(self, n: int, size: NatType):
        self.n = n
        self.size = size

    def element(self, head: int, tail: IntList.__int_list_type):
        obj = self.__Element(head, tail)
        obj.check(self.n, self.size)
        return obj

