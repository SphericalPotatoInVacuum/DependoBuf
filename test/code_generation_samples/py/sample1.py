# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations
from annotated_types import Ge
from dataclasses import dataclass
from typing import Annotated

Unsigned = Annotated[int, Ge(0)]


class User:
    @dataclass
    class __User:
        id: int
        name: str
        f: float

        def check(self) -> None:
            if type(self) not in User.possible_types():
                raise TypeError('Non-compliance with type dependencies')

    user_type = __User

    @classmethod
    def possible_types(cls) -> set[type]:
        return {}

    def __init__(self) -> None:
        self.dependencies = ()

    def construct(self, id: int, name: str, f: float) -> __User:
        obj = self.__User(id, name, f)
        obj.check(*self.dependencies)
        return obj
