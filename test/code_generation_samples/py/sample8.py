# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations
from annotated_types import Ge
from dataclasses import dataclass
from typing import Annotated

Unsigned = Annotated[int, Ge(0)]


class TreeH:
    @dataclass
    class __Leaf:
        val: int

        def check(self, h: int) -> None:
            if type(self) not in TreeH.possible_types(h):
                raise TypeError('Non-compliance with type dependencies')
    @dataclass
    class __TreeNode:
        val: int
        left: TreeH.tree_h_type
        right: TreeH.tree_h_type

        def check(self, h: int) -> None:
            if type(self) not in TreeH.possible_types(h):
                raise TypeError('Non-compliance with type dependencies')

    tree_h_type = __Leaf | __TreeNode
    __h_deps = []

    @classmethod
    def possible_types(cls, h: int) -> set[type]:
        return {}

    def __init__(self, h: int) -> None:
        self.dependencies = (h)

    def leaf(self, val: int) -> __Leaf:
        obj = self.__Leaf(val)
        obj.check(*self.dependencies)
        return obj

    def tree_node(self, val: int, left: TreeH.tree_h_type, right: TreeH.tree_h_type) -> __TreeNode:
        obj = self.__TreeNode(val, left, right)
        obj.check(*self.dependencies)
        return obj
