# This file was automatically generated by DependoBuf.
# Please do not change it.

from __future__ import annotations

from annotated_types import Ge
from dataclasses import dataclass
from typing import Annotated

Unsigned = Annotated[int, Ge(0)]


class DbufError(TypeError):
    pass


class Xerks:
    @dataclass
    class __Xerks:
        def check(self, u: Unsigned) -> None:
            pass

    xerks_type = __Xerks

    def __init__(self, u: Unsigned) -> None:
        self.dependencies = (u, )

    def construct(self) -> __Xerks:
        obj = self.__Xerks()
        obj.check(*self.dependencies)
        return obj


class Tver:
    @dataclass
    class __Tver:
        x: Unsigned

        def check(self) -> None:
            pass

    tver_type = __Tver

    def __init__(self) -> None:
        self.dependencies = ()

    def construct(self, x: Unsigned) -> __Tver:
        obj = self.__Tver(x)
        obj.check(*self.dependencies)
        return obj


class York:
    @dataclass
    class __York:
        t: Tver.tver_type

        def check(self) -> None:
            pass

    york_type = __York

    def __init__(self) -> None:
        self.dependencies = ()

    def construct(self, t: Tver.tver_type) -> __York:
        obj = self.__York(t)
        obj.check(*self.dependencies)
        return obj


class SomeMessage:
    @dataclass
    class __SomeMessage:
        x: Xerks.xerks_type

        def check(self, y: York.york_type) -> None:
            x_deps = (y.t.x + 1, )
            self.x.check(*x_deps)

    some_message_type = __SomeMessage

    def __init__(self, y: York.york_type) -> None:
        self.dependencies = (y, )

    def construct(self, x: Xerks.xerks_type) -> __SomeMessage:
        obj = self.__SomeMessage(x)
        obj.check(*self.dependencies)
        return obj


def _is_consistent(actual: tuple, expected: tuple) -> bool:
    for i in range(len(actual)):
        if expected[i] is None:
            continue

        if actual[i] != expected[i]:
            return False

    return True


obj = SomeMessage(York().construct(Tver().construct(4))).construct(Xerks(10).construct())
print(obj)