package dbuf

// THIS FILE IS AUTOGENERATED, DO NOT EDIT IT

import "errors"

type DependentEnum struct {
    n int

    InternalValue interface{}
}

type Constructor3 struct {
    Value3 string
}

type Nil struct {
}

type DependentEnumTypeConstraint interface {
    Constructor3 | Nil
}

func NewDependentEnum(n int) *DependentEnum {
    return &DependentEnum{
        n: n, 
    }
}

func SetValueDependentEnum[T DependentEnumTypeConstraint](enum *DependentEnum, value *T) {
    enum.InternalValue = value
}

func HasValueDependentEnum[T DependentEnumTypeConstraint](enum *DependentEnum) bool {
    _, ok := enum.InternalValue.(*T)
    return ok
}

func (obj *DependentEnum) Validate() error {
    if obj.n == 5 {
        if HasValueDependentEnum[Constructor3](obj) {
            return nil
        }
        return errors.New("enum DependentEnum does not contain any valid constructor")
    }
    if true {
        if HasValueDependentEnum[Nil](obj) {
            return nil
        }
        return errors.New("enum DependentEnum does not contain any valid constructor")
    }
    return nil
}

type SimpleEnum struct {

    InternalValue interface{}
}

type Constructor1 struct {
    Value1 bool
}

type Constructor2 struct {
    Value2 int
}

type SimpleEnumTypeConstraint interface {
    Constructor1 | Constructor2
}

func NewSimpleEnum() *SimpleEnum {
    return &SimpleEnum{}
}

func SetValueSimpleEnum[T SimpleEnumTypeConstraint](enum *SimpleEnum, value *T) {
    enum.InternalValue = value
}

func HasValueSimpleEnum[T SimpleEnumTypeConstraint](enum *SimpleEnum) bool {
    _, ok := enum.InternalValue.(*T)
    return ok
}

func (obj *SimpleEnum) Validate() error {
    if true {
        if HasValueSimpleEnum[Constructor1](obj) || HasValueSimpleEnum[Constructor2](obj) {
            return nil
        }
        return errors.New("enum SimpleEnum does not contain any valid constructor")
    }
    return nil
}

type M struct {
    d *DependentEnum

    S *SimpleEnum
}

func NewM(d *DependentEnum) *M {
    return &M{
        d: d, 
    }
}

func (obj *M) Validate() error {
    if obj.d.n != 5 {
        return errors.New("message M does not contain valid dependency type for d")
    }
    if err := obj.d.Validate(); err != nil {
        return err
    }
    return nil
}
