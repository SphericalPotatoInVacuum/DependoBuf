package dbuf

// THIS FILE IS AUTOGENERATED, DO NOT EDIT IT

import "errors"

type A struct {
    n int

    Value int
}

func NewA(n int) *A {
    return &A{
        n: n, 
    }
}

func (obj *A) Validate() error {
    return nil
}

type B struct {
    a *A

    I         int
    Dependent *A
}

func NewB(a *A) *B {
    return &B{
        a: a, 
    }
}

func (obj *B) Validate() error {
    if obj.a.n != 5 {
        return errors.New("message B does not contain valid dependency type for a")
    }
    if err := obj.a.Validate(); err != nil {
        return err
    }
    if obj.Dependent.n != obj.I {
        return errors.New("message B does not contain valid dependency type for Dependent")
    }
    if err := obj.Dependent.Validate(); err != nil {
        return err
    }
    return nil
}

type C struct {
    a *A
    b *B
}

func NewC(a *A, b *B) *C {
    return &C{
        a: a, b: b, 
    }
}

func (obj *C) Validate() error {
    if obj.a.n != 5 {
        return errors.New("message C does not contain valid dependency type for a")
    }
    if err := obj.a.Validate(); err != nil {
        return err
    }
    if obj.b.a != obj.a {
        return errors.New("message C does not contain valid dependency type for b")
    }
    if err := obj.b.Validate(); err != nil {
        return err
    }
    return nil
}
