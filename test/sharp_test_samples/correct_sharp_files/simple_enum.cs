// This file was automatically generated by DependoBuf.
// Please do not change it.

using System;
using System.Collections.Generic;

class dbuf {

public class First {
	public int a1;
	public bool b1;

	public First() {
	}

	public bool Check() {
		return true;
	}
}

public class Second {
	public bool a2;
	public int b2;

	public Second() {
	}

	public bool Check() {
		return true;
	}
}

public class Independent {
	public dynamic value;

	public Independent() {
	}
	public bool Check() {
		if (value is null) {
			return false;
		}
		return false || (value is First) && value.Check() || (value is Second) && value.Check();
	}
}

public class Dependencies {
	public readonly Independent i;

	public Dependencies(Independent i_) {
		i = i_;
	}

	public bool Check() {
		return true;
	}
}

public class A {
	public readonly int a;
	public int a1;

	public A(int a_) {
		a = a_;
	}

	public bool Check() {
		return true;
	}
}

public class B {
	public readonly int a;
	public bool a2;

	public B(int a_) {
		a = a_;
	}

	public bool Check() {
		return true;
	}
}

public class C {
	public readonly int a;
	public string a3;

	public C(int a_) {
		a = a_;
	}

	public bool Check() {
		return true;
	}
}

public class Dependent {
	public readonly int a;
	public dynamic value;



	public Dependent(int a_) {
		a = a_;
	}

	public bool Check() {
		if (value is null) {
			return false;
		}
		if (a == 5)
			return ((value is A) && value.Check()) || ((value is B) && value.Check());
		else if (a == 3)
			return ((value is C) && value.Check());
		return false;
	}
}

public class Fields {
	public readonly int a;
	public Independent i;
	public Dependent d;

	public Fields(int a_) {
		a = a_;
		d = new Dependent(a);
	}

	public bool Check() {
		return true;
	}
}

}

