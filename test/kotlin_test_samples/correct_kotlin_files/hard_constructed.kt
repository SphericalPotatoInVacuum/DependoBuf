package dbuf

// This file is autogenerated. Please, do not change it manually.

class A(val i: Long) {
    var x: Long = 0L
    var y: String = ""

    fun check() {
    }

    internal companion object Factory {
        fun default() : A {
            var return_object = A(0L)
            return return_object
        }
        fun make(x: Long, y: String): A {
            var return_object = A.default()
            return_object.x = x
            return_object.y = y
            return return_object
        }
    }
}

class B() {
    var x: Long = 0L
    lateinit var a: A

    fun check() {
        check(this::a.isInitialized) {"property a should be initialized"}

        check(a.i == x) {"dependency i of a (is ${a.i}) should be ${x}"}
    }

    internal companion object Factory {
        fun default() : B {
            var return_object = B()
            return return_object
        }
        fun make(x: Long, a: A): B {
            var return_object = B.default()
            return_object.x = x
            return_object.a = a
            return return_object
        }
    }
}

class BD(val b: B) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : BD {
            var return_object = BD(B.default())
            return return_object
        }
        fun make(): BD {
            var return_object = BD.default()
            return return_object
        }
    }
}

class Cons2(val x: Long) {
    var f1: Long = 0L
    var f2: String = ""

    fun check() {
    }

    internal companion object Factory {
        fun default() : Cons2 {
            var return_object = Cons2(0L)
            return return_object
        }
        fun make(f1: Long, f2: String): HardEnum {
            var return_object = HardEnum.default()
            var inside_object = Cons2.default()
            inside_object.f1 = f1
            inside_object.f2 = f2
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Cons3(val x: Long) {
    var f3: Boolean = false

    fun check() {
    }

    internal companion object Factory {
        fun default() : Cons3 {
            var return_object = Cons3(0L)
            return return_object
        }
        fun make(f3: Boolean): HardEnum {
            var return_object = HardEnum.default()
            var inside_object = Cons3.default()
            inside_object.f3 = f3
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Cons4(val x: Long) {
    lateinit var f4: A

    fun check() {
        check(this::f4.isInitialized) {"property f4 should be initialized"}

        check(f4.i == 2L) {"dependency i of f4 (is ${f4.i}) should be ${2L}"}
    }

    internal companion object Factory {
        fun default() : Cons4 {
            var return_object = Cons4(0L)
            return return_object
        }
        fun make(f4: A): HardEnum {
            var return_object = HardEnum.default()
            var inside_object = Cons4.default()
            inside_object.f4 = f4
            return_object.inside = inside_object
            return return_object
        }
    }
}

class HardEnum(val x: Long) {
    lateinit var inside: Any

    fun check() {
        check(this::inside.isInitialized) {"property inside should be initialized"}

        if (x == 1L) {
            if (inside is Cons2) {
                (inside as Cons2).check()
            }
            else if (inside is Cons3) {
                (inside as Cons3).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        if (true) {
            if (inside is Cons4) {
                (inside as Cons4).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        check(false) {"not valid inside"}
    }

    internal companion object Factory {
        fun default() : HardEnum {
            var return_object = HardEnum(0L)
            return return_object
        }
    }
}

class HardEnumD(val x: Long, val e: HardEnum) {
    fun check() {
        check(e.x == x) {"dependency x of e (is ${e.x}) should be ${x}"}

    }

    internal companion object Factory {
        fun default() : HardEnumD {
            var return_object = HardEnumD(0L, HardEnum.default())
            return return_object
        }
        fun make(): HardEnumD {
            var return_object = HardEnumD.default()
            return return_object
        }
    }
}

class HardCheck() {
    lateinit var v1: HardEnumD
    lateinit var v2: HardEnumD
    lateinit var v3: HardEnumD

    fun check() {
        check(this::v1.isInitialized) {"property v1 should be initialized"}
        check(this::v2.isInitialized) {"property v2 should be initialized"}
        check(this::v3.isInitialized) {"property v3 should be initialized"}

        check(v1.x == 1L) {"dependency x of v1 (is ${v1.x}) should be ${1L}"}
        check(v1.e == Cons2.make(f1 = 0L, f2 = "")) {"dependency e of v1 (is ${v1.e}) should be ${Cons2.make(f1 = 0L, f2 = "")}"}
        check(v2.x == 1L) {"dependency x of v2 (is ${v2.x}) should be ${1L}"}
        check(v2.e == Cons3.make(f3 = true)) {"dependency e of v2 (is ${v2.e}) should be ${Cons3.make(f3 = true)}"}
        check(v3.x == 2L) {"dependency x of v3 (is ${v3.x}) should be ${2L}"}
        check(v3.e == Cons4.make(f4 = A.make(x = -1L, y = "soo many strings"))) {"dependency e of v3 (is ${v3.e}) should be ${Cons4.make(f4 = A.make(x = -1L, y = "soo many strings"))}"}
    }

    internal companion object Factory {
        fun default() : HardCheck {
            var return_object = HardCheck()
            return return_object
        }
        fun make(v1: HardEnumD, v2: HardEnumD, v3: HardEnumD): HardCheck {
            var return_object = HardCheck.default()
            return_object.v1 = v1
            return_object.v2 = v2
            return_object.v3 = v3
            return return_object
        }
    }
}

class Cons1(val b: B) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Cons1 {
            var return_object = Cons1(B.default())
            return return_object
        }
        fun make(): HardConstructedEnumCheck {
            var return_object = HardConstructedEnumCheck.default()
            var inside_object = Cons1.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class HardConstructedEnumCheck(val b: B) {
    lateinit var inside: Any

    fun check() {
        check(this::inside.isInitialized) {"property inside should be initialized"}

        if (b == B.make(x = 1L, a = A.make(x = 2L, y = "Yay2"))) {
            if (inside is Cons1) {
                (inside as Cons1).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        check(false) {"not valid inside"}
    }

    internal companion object Factory {
        fun default() : HardConstructedEnumCheck {
            var return_object = HardConstructedEnumCheck(B.default())
            return return_object
        }
    }
}

class HardConstructedMessageCheck() {
    lateinit var bd: BD

    fun check() {
        check(this::bd.isInitialized) {"property bd should be initialized"}

        check(bd.b == B.make(x = 5L, a = A.make(x = 2L, y = "Yay"))) {"dependency b of bd (is ${bd.b}) should be ${B.make(x = 5L, a = A.make(x = 2L, y = "Yay"))}"}
    }

    internal companion object Factory {
        fun default() : HardConstructedMessageCheck {
            var return_object = HardConstructedMessageCheck()
            return return_object
        }
        fun make(bd: BD): HardConstructedMessageCheck {
            var return_object = HardConstructedMessageCheck.default()
            return_object.bd = bd
            return return_object
        }
    }
}

