package dbuf

// This file is autogenerated. Please, do not change it manually.

class Kek(val i: Long) {
    var j: Long = 0L

    fun check() {
    }

    internal companion object Factory {
        fun default() : Kek {
            var return_object = Kek(0L)
            return return_object
        }
        fun make(j: Long): Kek {
            var return_object = Kek.default()
            return_object.j = j
            return return_object
        }
    }
}

class Constructor1(val n: Long, val m: Long, val k: Kek) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Constructor1 {
            var return_object = Constructor1(0L, 0L, Kek.default())
            return return_object
        }
        fun make(): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor1.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Constructor2(val n: Long, val m: Long, val k: Kek) {
    var x: Long = 0L

    fun check() {
    }

    internal companion object Factory {
        fun default() : Constructor2 {
            var return_object = Constructor2(0L, 0L, Kek.default())
            return return_object
        }
        fun make(x: Long): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor2.default()
            inside_object.x = x
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Constructor3(val n: Long, val m: Long, val k: Kek) {
    var y: Long = 0L
    lateinit var k1: Kek
    lateinit var k2: Kek

    fun check() {
        check(this::k1.isInitialized) {"property k1 should be initialized"}
        check(this::k2.isInitialized) {"property k2 should be initialized"}

        check(k1.i == (y + n)) {"dependency i of k1 (is ${k1.i}) should be ${(y + n)}"}
        check(k2.i == ((k.j + k1.j) + m)) {"dependency i of k2 (is ${k2.i}) should be ${((k.j + k1.j) + m)}"}
    }

    internal companion object Factory {
        fun default() : Constructor3 {
            var return_object = Constructor3(0L, 0L, Kek.default())
            return return_object
        }
        fun make(y: Long, k1: Kek, k2: Kek): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor3.default()
            inside_object.y = y
            inside_object.k1 = k1
            inside_object.k2 = k2
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Constructor4(val n: Long, val m: Long, val k: Kek) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Constructor4 {
            var return_object = Constructor4(0L, 0L, Kek.default())
            return return_object
        }
        fun make(): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor4.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Constructor5(val n: Long, val m: Long, val k: Kek) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Constructor5 {
            var return_object = Constructor5(0L, 0L, Kek.default())
            return return_object
        }
        fun make(): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor5.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Constructor7(val n: Long, val m: Long, val k: Kek) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Constructor7 {
            var return_object = Constructor7(0L, 0L, Kek.default())
            return return_object
        }
        fun make(): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor7.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Constructor8(val n: Long, val m: Long, val k: Kek) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Constructor8 {
            var return_object = Constructor8(0L, 0L, Kek.default())
            return return_object
        }
        fun make(): Triple {
            var return_object = Triple.default()
            var inside_object = Constructor8.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Triple(val n: Long, val m: Long, val k: Kek) {
    lateinit var inside: Any

    fun check() {
        check(k.i == (m + (m * m))) {"dependency i of k (is ${k.i}) should be ${(m + (m * m))}"}

        check(this::inside.isInitialized) {"property inside should be initialized"}

        if (n == 1L) {
            if (inside is Constructor1) {
                (inside as Constructor1).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        if (n == 2L && m == 2L) {
            if (inside is Constructor2) {
                (inside as Constructor2).check()
            }
            else if (inside is Constructor3) {
                (inside as Constructor3).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        if (m == 3L) {
            if (inside is Constructor4) {
                (inside as Constructor4).check()
            }
            else if (inside is Constructor5) {
                (inside as Constructor5).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        if (n == 4L && m == -4L) {
            check(false) {"not valid inside"}
            return
        }
        if (true) {
            if (inside is Constructor7) {
                (inside as Constructor7).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        if (n == 4L) {
            if (inside is Constructor8) {
                (inside as Constructor8).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        check(false) {"not valid inside"}
    }

    internal companion object Factory {
        fun default() : Triple {
            var return_object = Triple(0L, 0L, Kek.default())
            return return_object
        }
    }
}

