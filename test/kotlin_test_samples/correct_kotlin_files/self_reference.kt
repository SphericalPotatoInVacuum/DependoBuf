package dbuf

// This file is autogenerated. Please, do not change it manually.

class Leaf(val height: Long) {
    fun check() {
    }

    internal companion object Factory {
        fun default() : Leaf {
            var return_object = Leaf(0L)
            return return_object
        }
        fun make(): Tree {
            var return_object = Tree.default()
            var inside_object = Leaf.default()
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Node(val height: Long) {
    lateinit var l: Tree
    lateinit var r: Tree
    var value: Long = 0L

    fun check() {
        check(this::l.isInitialized) {"property l should be initialized"}
        check(this::r.isInitialized) {"property r should be initialized"}

        check(l.height == (height - 1L)) {"dependency height of l (is ${l.height}) should be ${(height - 1L)}"}
        check(r.height == (height - 1L)) {"dependency height of r (is ${r.height}) should be ${(height - 1L)}"}
    }

    internal companion object Factory {
        fun default() : Node {
            var return_object = Node(0L)
            return return_object
        }
        fun make(l: Tree, r: Tree, value: Long): Tree {
            var return_object = Tree.default()
            var inside_object = Node.default()
            inside_object.l = l
            inside_object.r = r
            inside_object.value = value
            return_object.inside = inside_object
            return return_object
        }
    }
}

class Tree(val height: Long) {
    lateinit var inside: Any

    fun check() {
        check(this::inside.isInitialized) {"property inside should be initialized"}

        if (height == 0L) {
            if (inside is Leaf) {
                (inside as Leaf).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        if (true) {
            if (inside is Node) {
                (inside as Node).check()
            }
            else {
                check(false) {"not valid inside"}
            }
            return
        }
        check(false) {"not valid inside"}
    }

    internal companion object Factory {
        fun default() : Tree {
            var return_object = Tree(0L)
            return return_object
        }
    }
}

class TreeD(val x: Long, val t: Tree) {
    fun check() {
        check(t.height == x) {"dependency height of t (is ${t.height}) should be ${x}"}

    }

    internal companion object Factory {
        fun default() : TreeD {
            var return_object = TreeD(0L, Tree.default())
            return return_object
        }
        fun make(): TreeD {
            var return_object = TreeD.default()
            return return_object
        }
    }
}

class IWantedBiggerTree() {
    lateinit var tree: TreeD

    fun check() {
        check(this::tree.isInitialized) {"property tree should be initialized"}

        check(tree.x == 0L) {"dependency x of tree (is ${tree.x}) should be ${0L}"}
        check(tree.t == Leaf.make()) {"dependency t of tree (is ${tree.t}) should be ${Leaf.make()}"}
    }

    internal companion object Factory {
        fun default() : IWantedBiggerTree {
            var return_object = IWantedBiggerTree()
            return return_object
        }
        fun make(tree: TreeD): IWantedBiggerTree {
            var return_object = IWantedBiggerTree.default()
            return_object.tree = tree
            return return_object
        }
    }
}

