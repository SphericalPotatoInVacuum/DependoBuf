#include "core/codegen/py_print.h"

#include <iostream>
#include <unordered_map>
#include <utility>

namespace dbuf::gen {
const std::unordered_map<std::string, std::string> PyPrinter::kBuildInTypes = {
    {"Int", "int"},
    {"Unsigned", "int"},
    {"Float", "float"},
    {"String", "str"},
    {"Bool", "bool"},
};

const std::string PyPrinter::kReadme = "# This file was automatically generated by DependoBuf.\n"
                                       "# Please do not change it.\n";

const std::string PyPrinter::kImport = "\n"
                                       "from dataclasses import dataclass\n";

PyPrinter::PyPrinter(std::shared_ptr<std::ofstream> output) {
  out_ = std::move(output);
}

std::string PyPrinter::get_python_type(const std::string &type) {
  if (kBuildInTypes.contains(type)) {
    return kBuildInTypes.at(type);
  }

  return type;
}

void PyPrinter::init_file() {
  *out_ << kReadme << kImport;
}

void PyPrinter::print_class(const std::string &name) {
  // "class {name}:"
  *out_ << "\n";
  *out_ << "\n";
  *out_ << "@dataclass"
        << "\n";
  *out_ << "class " << name << ":"
        << "\n";
}

void PyPrinter::print_field(const std::string &name, const std::string &type) {
  // "  {name}: {py_type} | None = None"
  std::string py_type = get_python_type(type);
  *out_ << "  " << name << ": " << py_type << " | None = None"
        << "\n";
}

} // namespace dbuf::gen