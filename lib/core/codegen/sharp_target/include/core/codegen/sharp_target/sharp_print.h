#pragma once

#include <array>
#include <fstream>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include "core/ast/ast.h"
#include "core/ast/expression.h"

namespace dbuf::gen {

static const std::string kReadme = "// This file was automatically generated by DependoBuf.\n"
                                   "// Please do not change it.\n";

static const std::string kGetterAndSetter = "{ get; set; }";

class SharpTypes {
public:
    static constexpr std::string ConstructSharpType(const std::string &dbuf_type);

private:
    static constexpr unsigned int HashString(const std::string &str);
    
    static constexpr const char* kTypes[] = {"bool", "float", "int", "string", "unsigned"};
};

class SharpPrinter {
public:
    SharpPrinter() = default;

    explicit SharpPrinter(std::shared_ptr<std::ofstream> output);

    void InitFile();

    void PrintClassBegin(const std::string &name);

    void PrintClassEnd();

    void PrintEnumBegin(const std::string &name);

    void PrintEnumEnd();

    void PrintTypedVariables(
        const std::vector<ast::TypedVariable> &variables,
        std::string &&delimeter,
        bool add_last_delimeter,
        bool is_public,
        bool need_getter_and_setter);
    
    void PrintTypeExpression(
        const ast::TypeExpression &expression,
        bool is_public);
    
    void PrintBinaryExpressionBegin();

    void PrintBinaryExpressionType(const ast::BinaryExpression &binary_expr);

    void PrintBinaryExpressionEnd();

    void PrintUnaryExpressionType(const ast::UnaryExpression &unary_expr);

    void PrintConstructedValueBegin(const ast::ConstructedValue &constr_value);

    void PrintConstructedValueEnd();
    
    void PrintValue(const ast::Value &value);

    void PrintVarAccess(const ast::VarAccess &var_access);

private:
    static std::string GetVariableName(const ast::TypedVariable &var);

    static std::string GetVariableType(const ast::TypedVariable &var);

    static std::string GetExpressionType(const ast::TypeExpression &expr);

    std::shared_ptr<std::ofstream> out_ = nullptr;

    SharpTypes type_constructor_;
};

} // namespace dbuf::gen
