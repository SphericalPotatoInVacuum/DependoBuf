#pragma once

#include <array>
#include <fstream>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include "core/ast/ast.h"

namespace dbuf::gen {

static const std::string kReadme = "// This file was automatically generated by DependoBuf.\n"
                                   "// Please do not change it.\n";

static const std::string kGetterAndSetter = "{ get; set; }";

class SharpTypes {
public:
    static constexpr std::string ConstructSharpType(const std::string &dbuf_type);

private:
    static constexpr unsigned int HashString(const std::string &str);
    
    static constexpr const char* kTypes[] = {"bool", "float", "int", "string", "unsigned"};
};

class SharpPrinter {
public:
    SharpPrinter() = default;

    explicit SharpPrinter(std::shared_ptr<std::ofstream> output);

    void InitFile();

    void PrintVariables(
        const std::vector<ast::TypedVariable> &variables,
        std::string &&delimeter,
        bool add_last_delimeter,
        bool is_public,
        bool need_getter_and_setter);
    
    void PrintClassBegin(const std::string &name);

    void PrintClassEnd();

private:
    static std::string GetVariableName(const ast::TypedVariable &var);

    static std::string GetVariableType(const ast::TypedVariable &var);

    std::shared_ptr<std::ofstream> out_ = nullptr;

    SharpTypes type_constructor_;
};

} // namespace dbuf::gen
