#pragma once

namespace dbuf::gen {

static const std::string kReadme = "// This file was automatically generated by DependoBuf.\n"
                                   "// Please do not change it.\n";

static const std::string kIncludedLibraries = "using System;\n"
                                              "using System.Collections.Generic;\n";

static const std::string kOpenNamespace = "class dbuf {\n";

static const std::string kCloseNamespace = "}\n";

static const std::string kBaseEnumFields = "\tprivate readonly List<Type> Restrictions;\n"
                                           "\tprivate dynamic _value;\n\n"
                                           "\tpublic dynamic Value {\n"
                                           "\t\tget { return _value; }\n"
                                           "\t\tset {\n"
                                           "\t\t\tforeach (var type in Restrictions) {\n"
                                           "\t\t\t\tif (type.IsInstanceOfType(value)) {\n"
                                           "\t\t\t\t\t_value = value;\n"
                                           "\t\t\t\t\treturn;\n"
                                           "\t\t\t\t}\n"
                                           "\t\t\t}\n"
                                           "\t\t\tthrow new ArgumentException(\"Incorrect argument type\");\n"
                                           "\t\t}\n"
                                           "\t}\n";

static const std::string kBaseEnumConstructor = "\t\tRestrictions = new List<Type>();\n"
                                                "\t\tforeach (var type in AllowedTypes) {\n"
                                                "\t\t\tvar val = (dynamic)Activator.CreateInstance(type, a_);\n"
                                                "\t\t\tif (val.Check()) {\n"
                                                "\t\t\t\tforeach (var restr in val.restrictions) {\n"
                                                "\t\t\t\t\tRestrictions.Add(restr);\n"
                                                "\t\t\t\t}\n"
                                                "\t\t\t}\n"
                                                "\t\t}\n";

static const std::string kBaseEnumCheck = "\tpublic bool Check() {\n"
                                          "\t\tforeach (var type in Restrictions) {\n"
                                          "\t\t\tif (type.IsInstanceOfType(_value)) {\n"
                                          "\t\t\t\tif (type.GetMethod(\"Check\") != null) {\n"
                                          "\t\t\t\t\treturn _value.Check();\n"
                                          "\t\t\t\t} else {\n"
                                          "\t\t\t\t\treturn true;\n"
                                          "\t\t\t\t}\n"
                                          "\t\t\t}\n"
                                          "\t\t}\n"
                                          "\t\treturn false;\n"
                                          "\t}\n";

} // namespace dbuf::gen
